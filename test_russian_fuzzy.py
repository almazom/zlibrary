#!/usr/bin/env python3
"""
RUSSIAN BOOK TITLES - Fuzzy Input Testing
Testing Cyrillic fuzzy inputs and common Russian book misspellings
"""
import asyncio
import sys
sys.path.insert(0, '.')
from book_normalization_system import UnifiedBookNormalizer

# Russian fuzzy examples
RUSSIAN_FUZZY_EXAMPLES = [
    # –í–æ–π–Ω–∞ –∏ –º–∏—Ä (War and Peace)
    ("–≤–∞–π–Ω–∞ –∏ –º–∏—Ä", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"),  # Common phonetic mistake
    ("–≤–æ–π–Ω–∞ –∏–º–∏—Ä", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"),    # Missing space
    ("–≤–æ–∏–Ω–∞ –∏ –º–∏—Ä", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"),   # Typo
    
    # –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ (Crime and Punishment)
    ("–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω—å–µ", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ"),
    ("–ø—Ä–∏—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ"),
    ("–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ"),
    
    # –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ (Master and Margarita)
    ("–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–æ—Ä–∏—Ç–∞", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
    ("–º–∞—Å—Ç–µ—Ä –∏–º–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
    ("–º–∞—Å—Ç–∏—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
    
    # –ï–≤–≥–µ–Ω–∏–π –û–Ω–µ–≥–∏–Ω (Eugene Onegin)
    ("–µ–≤–≥–µ–Ω–∏–π –∞–Ω–µ–≥–∏–Ω", "–µ–≤–≥–µ–Ω–∏–π –æ–Ω–µ–≥–∏–Ω"),
    ("–µ–≤–≥–µ–Ω–∏ –æ–Ω–µ–≥–∏–Ω", "–µ–≤–≥–µ–Ω–∏–π –æ–Ω–µ–≥–∏–Ω"),
    ("–µ–≤–≥–µ–Ω–∏–π –æ–Ω–∏–≥–∏–Ω", "–µ–≤–≥–µ–Ω–∏–π –æ–Ω–µ–≥–∏–Ω"),
    
    # –ë—Ä–∞—Ç—å—è –ö–∞—Ä–∞–º–∞–∑–æ–≤—ã (Brothers Karamazov)
    ("–±—Ä–∞—Ç—å—è –∫–∞—Ä–∞–º–∞–∑–æ–≤–∏", "–±—Ä–∞—Ç—å—è –∫–∞—Ä–∞–º–∞–∑–æ–≤—ã"),
    ("–±—Ä–∞—Ç—è –∫–∞—Ä–∞–º–∞–∑–æ–≤—ã", "–±—Ä–∞—Ç—å—è –∫–∞—Ä–∞–º–∞–∑–æ–≤—ã"),
    ("–±—Ä–∞—Ç—å—è –∫–æ—Ä–æ–º–∞–∑–æ–≤—ã", "–±—Ä–∞—Ç—å—è –∫–∞—Ä–∞–º–∞–∑–æ–≤—ã"),
    
    # Mixed Latin/Cyrillic (common typing error)
    ("–≤o–π–Ω–∞ –∏ –º–∏—Ä", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"),  # 'o' is Latin, not Cyrillic
    ("–ºac—Çep –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"),  # 'a' and 'c' are Latin
    
    # Abbreviations
    ("–≤–∏–º", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"),
    ("–ø–∏–Ω", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ"),
    ("–º–∏–º", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
    
    # Author + partial title
    ("—Ç–æ–ª—Å—Ç–æ–π –≤–æ–π–Ω–∞", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä —Ç–æ–ª—Å—Ç–æ–π"),
    ("–¥–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"),
    ("–±—É–ª–≥–∞–∫–æ–≤ –º–∞—Å—Ç–µ—Ä", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞ –±—É–ª–≥–∞–∫–æ–≤"),
    
    # Phonetic in Latin
    ("voyna i mir", "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"),
    ("master i margarita", "–º–∞—Å—Ç–µ—Ä –∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
    ("prestuplenie i nakazanie", "–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ"),
]

async def test_russian_fuzzy(fuzzy_text, expected=None):
    """Test Russian fuzzy input"""
    normalizer = UnifiedBookNormalizer()
    
    print(f"\n{'='*60}")
    print(f"üìñ RUSSIAN INPUT: '{fuzzy_text}'")
    if expected:
        print(f"üìã EXPECTED: '{expected}'")
    print('='*60)
    
    # Process it
    result = await normalizer.normalize_book_query(fuzzy_text)
    
    # Extract results
    normalized = result['final_result']['result']
    confidence = result['final_result']['confidence']
    method = result['final_result']['method']
    detected_type = result.get('detected_type', 'unknown')
    
    print(f"\nüîç ANALYSIS:")
    print(f"  ‚Ä¢ Problem detected: {detected_type}")
    print(f"  ‚Ä¢ Confidence: {confidence:.0%}")
    
    print(f"\n‚ú® RESULT:")
    print(f"  Input:  '{fuzzy_text}'")
    print(f"  Output: '{normalized}'")
    
    if normalized != fuzzy_text:
        print(f"\n‚úÖ Changed: '{fuzzy_text}' ‚Üí '{normalized}'")
    else:
        print(f"\nüìå No change (might need Russian-specific rules)")
    
    return normalized

async def test_all_russian_examples():
    """Test all Russian examples"""
    print("\nüá∑üá∫ TESTING RUSSIAN FUZZY BOOK TITLES")
    print("="*70)
    
    success = 0
    total = len(RUSSIAN_FUZZY_EXAMPLES)
    
    for fuzzy, expected in RUSSIAN_FUZZY_EXAMPLES[:5]:  # Test first 5
        result = await test_russian_fuzzy(fuzzy, expected)
        if result.lower() == expected.lower():
            success += 1
        print("-"*60)
    
    print(f"\nüìä Results: {success}/{5} corrected successfully")
    print("\nNOTE: Full Russian support would need:")
    print("  ‚Ä¢ Russian-specific typo rules")
    print("  ‚Ä¢ Cyrillic keyboard layout error patterns")
    print("  ‚Ä¢ Common Russian book abbreviations")
    print("  ‚Ä¢ Transliteration support (Latin ‚Üî Cyrillic)")

# Examples to try manually
MANUAL_TEST_EXAMPLES = [
    "–≤–∞–π–Ω–∞ –∏ –º–∏—Ä",           # –í–æ–π–Ω–∞ –∏ –º–∏—Ä with phonetic error
    "–º–∞—Å—Ç–µ—Ä –∏–º–∞—Ä–≥–∞—Ä–∏—Ç–∞",     # –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ without space
    "–¥–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π –±—Ä–∞—Ç—è",     # Dostoevsky + Brothers (typo)
    "prestuplenie",          # Crime and Punishment in Latin
    "—Ç–æ–ª—Å—Ç–æ–π –≤–∏–º",          # Tolstoy + abbreviation
    "–µ–≤–≥–µ–Ω–∏ –∞–Ω–µ–≥–∏–Ω –ø—É—à–∫–∏–Ω",  # Eugene Onegin by Pushkin with typos
]

if __name__ == "__main__":
    print("\nüöÄ RUSSIAN FUZZY INPUT TEST")
    print("\nChoose test mode:")
    print("1. Test one specific input")
    print("2. Test all examples")
    print("3. Show manual examples")
    
    # For Claude Code, we'll test one specific example
    TEST_INPUT = "–≤–∞–π–Ω–∞ –∏ –º–∏—Ä"  # <-- CHANGE THIS TO YOUR RUSSIAN FUZZY INPUT
    
    print(f"\nTesting: '{TEST_INPUT}'")
    asyncio.run(test_russian_fuzzy(TEST_INPUT, "–≤–æ–π–Ω–∞ –∏ –º–∏—Ä"))
    
    print("\n" + "="*60)
    print("üìù More Russian fuzzy examples to try:")
    for i, example in enumerate(MANUAL_TEST_EXAMPLES, 1):
        print(f"  {i}. '{example}'")
    print("\nChange TEST_INPUT in the file to test different ones!")