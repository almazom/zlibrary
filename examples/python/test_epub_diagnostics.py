#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ EPUB –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π EPUB —Ñ–∞–π–ª –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ
"""

import zipfile
import tempfile
import os
from pathlib import Path
import sys

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –Ω–∞—à–∏–º –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "python"))

from epub_diagnostics import EPUBDiagnostics

def create_test_epub(output_path):
    """–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π EPUB —Ñ–∞–π–ª"""
    print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ EPUB —Ñ–∞–π–ª–∞...")
    
    with zipfile.ZipFile(output_path, 'w', zipfile.ZIP_DEFLATED) as epub:
        # 1. mimetype (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∏ –Ω–µ—Å–∂–∞—Ç—ã–º)
        epub.writestr('mimetype', 'application/epub+zip', zipfile.ZIP_STORED)
        
        # 2. META-INF/container.xml
        container_xml = '''<?xml version="1.0" encoding="UTF-8"?>
<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
    <rootfiles>
        <rootfile full-path="OEBPS/content.opf" media-type="application/oebps-package+xml"/>
    </rootfiles>
</container>'''
        epub.writestr('META-INF/container.xml', container_xml)
        
        # 3. content.opf
        content_opf = '''<?xml version="1.0" encoding="UTF-8"?>
<package xmlns="http://www.idpf.org/2007/opf" version="3.0" unique-identifier="book-id">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/">
        <dc:title>Test Book - Python Programming Guide</dc:title>
        <dc:creator>Test Author</dc:creator>
        <dc:language>en</dc:language>
        <dc:identifier id="book-id">test-book-123</dc:identifier>
        <meta property="dcterms:modified">2024-01-01T00:00:00Z</meta>
    </metadata>
    
    <manifest>
        <item id="nav" href="nav.xhtml" media-type="application/xhtml+xml" properties="nav"/>
        <item id="chapter1" href="chapter1.xhtml" media-type="application/xhtml+xml"/>
        <item id="stylesheet" href="styles.css" media-type="text/css"/>
        <item id="cover-image" href="cover.jpg" media-type="image/jpeg"/>
    </manifest>
    
    <spine>
        <itemref idref="chapter1"/>
    </spine>
</package>'''
        epub.writestr('OEBPS/content.opf', content_opf)
        
        # 4. nav.xhtml
        nav_xhtml = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <title>Navigation</title>
</head>
<body>
    <nav epub:type="toc">
        <h1>Table of Contents</h1>
        <ol>
            <li><a href="chapter1.xhtml">Chapter 1: Introduction to Python</a></li>
        </ol>
    </nav>
</body>
</html>'''
        epub.writestr('OEBPS/nav.xhtml', nav_xhtml)
        
        # 5. chapter1.xhtml
        chapter1_xhtml = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Chapter 1: Introduction to Python</title>
    <link rel="stylesheet" type="text/css" href="styles.css"/>
</head>
<body>
    <h1>Chapter 1: Introduction to Python</h1>
    <p>Python is a high-level, interpreted programming language with dynamic semantics.</p>
    <p>Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development.</p>
    
    <h2>Key Features</h2>
    <ul>
        <li>Easy to learn and use</li>
        <li>Extensive standard library</li>
        <li>Cross-platform compatibility</li>
        <li>Strong community support</li>
    </ul>
    
    <h2>Example Code</h2>
    <pre><code>
def hello_world():
    print("Hello, World!")
    return "Welcome to Python programming!"

# Call the function
message = hello_world()
print(message)
    </code></pre>
    
    <p>This is a simple example demonstrating Python syntax.</p>
    <img src="cover.jpg" alt="Python Logo" style="max-width: 200px;"/>
</body>
</html>'''
        epub.writestr('OEBPS/chapter1.xhtml', chapter1_xhtml)
        
        # 6. styles.css
        styles_css = '''
body {
    font-family: "Times New Roman", serif;
    line-height: 1.6;
    margin: 1em;
    color: #333;
}

h1, h2 {
    color: #2c3e50;
    border-bottom: 2px solid #3498db;
    padding-bottom: 0.3em;
}

pre {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 4px;
    padding: 1em;
    overflow-x: auto;
}

code {
    font-family: "Courier New", monospace;
    background-color: #f1f3f4;
    padding: 0.2em 0.4em;
    border-radius: 3px;
}

ul {
    list-style-type: square;
}

img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 1em auto;
}
'''
        epub.writestr('OEBPS/styles.css', styles_css)
        
        # 7. –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (fake JPEG header + minimal data)
        fake_jpg = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xdb\x00C\x00' + b'\x00' * 100 + b'\xff\xd9'
        epub.writestr('OEBPS/cover.jpg', fake_jpg)
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π EPUB —Å–æ–∑–¥–∞–Ω: {output_path}")
    return output_path

def create_bad_epub(output_path):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–æ—Ö–æ–π EPUB —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    print("üí• –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Ö–æ–≥–æ EPUB —Ñ–∞–π–ª–∞...")
    
    with zipfile.ZipFile(output_path, 'w') as epub:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π mimetype
        epub.writestr('mimetype', 'application/zip')
        
        # –ë–∏—Ç—ã–π container.xml
        epub.writestr('META-INF/container.xml', '<broken xml>')
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPF —Ñ–∞–π–ª
    
    print(f"‚úÖ –ü–ª–æ—Ö–æ–π EPUB —Å–æ–∑–¥–∞–Ω: {output_path}")
    return output_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ EPUB —Ñ–∞–π–ª–æ–≤")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –¢–µ—Å—Ç 1: –•–æ—Ä–æ—à–∏–π EPUB
        print("\n1Ô∏è‚É£ –¢–ï–°–¢: –•–æ—Ä–æ—à–∏–π EPUB —Ñ–∞–π–ª")
        print("-" * 30)
        
        good_epub = temp_path / "good_book.epub"
        create_test_epub(good_epub)
        
        print("\nüìñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ö–æ—Ä–æ—à–µ–≥–æ EPUB:")
        diagnostics1 = EPUBDiagnostics(good_epub)
        result1 = diagnostics1.analyze()
        
        # –¢–µ—Å—Ç 2: –ü–ª–æ—Ö–æ–π EPUB
        print("\n\n2Ô∏è‚É£ –¢–ï–°–¢: –ü–ª–æ—Ö–æ–π EPUB —Ñ–∞–π–ª")
        print("-" * 30)
        
        bad_epub = temp_path / "bad_book.epub"
        create_bad_epub(bad_epub)
        
        print("\nüìñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–æ—Ö–æ–≥–æ EPUB:")
        diagnostics2 = EPUBDiagnostics(bad_epub)
        result2 = diagnostics2.analyze()
        
        # –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        print("\n\n3Ô∏è‚É£ –¢–ï–°–¢: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª")
        print("-" * 30)
        
        missing_epub = temp_path / "missing.epub"
        
        print("\nüìñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞:")
        diagnostics3 = EPUBDiagnostics(missing_epub)
        result3 = diagnostics3.analyze()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("\n\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
        print("=" * 40)
        
        tests = [
            ("–•–æ—Ä–æ—à–∏–π EPUB", result1),
            ("–ü–ª–æ—Ö–æ–π EPUB", result2), 
            ("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª", result3)
        ]
        
        for test_name, result in tests:
            quality_score = result.get('quality_score', 0)
            issues_count = result.get('issues_count', 0)
            warnings_count = result.get('warnings_count', 0)
            
            if quality_score >= 80:
                status_icon = "üü¢"
            elif quality_score >= 60:
                status_icon = "üü°"
            else:
                status_icon = "üî¥"
            
            print(f"{status_icon} {test_name}:")
            print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score}/100")
            print(f"   ‚Ä¢ –û—à–∏–±–∫–∏: {issues_count}")
            print(f"   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings_count}")
            print()
        
        print("üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("üí° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ EPUB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()