#!/usr/bin/env python3
"""
üìñ EPUB Diagnostics Tool
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ EPUB —Ñ–∞–π–ª–∞
"""

import zipfile
import xml.etree.ElementTree as ET
import os
import sys
from pathlib import Path
import mimetypes
from collections import defaultdict
import re

class EPUBDiagnostics:
    def __init__(self, epub_path):
        self.epub_path = Path(epub_path)
        self.issues = []
        self.warnings = []
        self.info = {}
        
    def analyze(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ EPUB —Ñ–∞–π–ª–∞"""
        print(f"üìñ –ê–Ω–∞–ª–∏–∑ EPUB: {self.epub_path.name}")
        print("=" * 50)
        
        if not self.epub_path.exists():
            self.issues.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.epub_path}")
            return self.generate_report()
        
        if not self.epub_path.suffix.lower() == '.epub':
            self.warnings.append("–§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .epub")
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._check_file_structure()
            self._check_mimetype()
            self._check_container_xml()
            self._check_opf_file()
            self._check_content_files()
            self._check_images()
            self._analyze_size_and_stats()
            
        except Exception as e:
            self.issues.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        return self.generate_report()
    
    def _check_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ZIP"""
        try:
            with zipfile.ZipFile(self.epub_path, 'r') as zip_file:
                self.file_list = zip_file.namelist()
                self.info['total_files'] = len(self.file_list)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                required_files = ['mimetype', 'META-INF/container.xml']
                
                for req_file in required_files:
                    if req_file not in self.file_list:
                        self.issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {req_file}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ZIP
                bad_files = zip_file.testzip()
                if bad_files:
                    self.issues.append(f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ: {bad_files}")
                
                print(f"‚úÖ ZIP —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(self.file_list)} —Ñ–∞–π–ª–æ–≤")
                
        except zipfile.BadZipFile:
            self.issues.append("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º")
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    def _check_mimetype(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ mimetype"""
        try:
            with zipfile.ZipFile(self.epub_path, 'r') as zip_file:
                if 'mimetype' in self.file_list:
                    mimetype_content = zip_file.read('mimetype').decode('utf-8').strip()
                    
                    if mimetype_content == 'application/epub+zip':
                        print("‚úÖ MIME type: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                    else:
                        self.issues.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π MIME type: {mimetype_content}")
                else:
                    self.issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª mimetype")
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ mimetype: {e}")
    
    def _check_container_xml(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ META-INF/container.xml"""
        try:
            with zipfile.ZipFile(self.epub_path, 'r') as zip_file:
                if 'META-INF/container.xml' in self.file_list:
                    container_content = zip_file.read('META-INF/container.xml')
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ XML
                    root = ET.fromstring(container_content)
                    
                    # –ù–∞–π—Ç–∏ OPF —Ñ–∞–π–ª
                    ns = {'container': 'urn:oasis:names:tc:opendocument:xmlns:container'}
                    rootfiles = root.findall('.//container:rootfile', ns)
                    
                    if rootfiles:
                        self.opf_path = rootfiles[0].get('full-path')
                        print(f"‚úÖ Container.xml: OPF —Ñ–∞–π–ª - {self.opf_path}")
                    else:
                        self.issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ OPF —Ñ–∞–π–ª—É –≤ container.xml")
                        
                else:
                    self.issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç META-INF/container.xml")
        except ET.ParseError as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ container.xml: {e}")
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ container.xml: {e}")
    
    def _check_opf_file(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ OPF —Ñ–∞–π–ª–∞ (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)"""
        if not hasattr(self, 'opf_path'):
            return
        
        try:
            with zipfile.ZipFile(self.epub_path, 'r') as zip_file:
                if self.opf_path in self.file_list:
                    opf_content = zip_file.read(self.opf_path)
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ OPF
                    root = ET.fromstring(opf_content)
                    
                    # –ò–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    self._extract_metadata(root)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç
                    self._check_manifest(root)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å spine
                    self._check_spine(root)
                    
                    print("‚úÖ OPF —Ñ–∞–π–ª: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    
                else:
                    self.issues.append(f"OPF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.opf_path}")
                    
        except ET.ParseError as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OPF —Ñ–∞–π–ª–∞: {e}")
        except Exception as e:
            self.issues.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OPF —Ñ–∞–π–ª–∞: {e}")
    
    def _extract_metadata(self, opf_root):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ OPF"""
        ns = {
            'opf': 'http://www.idpf.org/2007/opf',
            'dc': 'http://purl.org/dc/elements/1.1/'
        }
        
        metadata = opf_root.find('.//opf:metadata', ns)
        if metadata is not None:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            title = metadata.find('.//dc:title', ns)
            creator = metadata.find('.//dc:creator', ns)
            language = metadata.find('.//dc:language', ns)
            identifier = metadata.find('.//dc:identifier', ns)
            
            self.info['title'] = title.text if title is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            self.info['creator'] = creator.text if creator is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            self.info['language'] = language.text if language is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            self.info['identifier'] = identifier.text if identifier is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {self.info['title']}")
            print(f"üë§ –ê–≤—Ç–æ—Ä: {self.info['creator']}")
            print(f"üåç –Ø–∑—ã–∫: {self.info['language']}")
            
        else:
            self.warnings.append("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ OPF —Ñ–∞–π–ª–µ")
    
    def _check_manifest(self, opf_root):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ (—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤)"""
        ns = {'opf': 'http://www.idpf.org/2007/opf'}
        
        manifest = opf_root.find('.//opf:manifest', ns)
        if manifest is not None:
            items = manifest.findall('.//opf:item', ns)
            
            self.manifest_files = {}
            self.info['manifest_items'] = len(items)
            
            file_types = defaultdict(int)
            
            for item in items:
                href = item.get('href', '')
                media_type = item.get('media-type', '')
                item_id = item.get('id', '')
                
                self.manifest_files[item_id] = {
                    'href': href,
                    'media_type': media_type
                }
                
                # –°—á–µ—Ç—á–∏–∫ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
                if 'html' in media_type or 'xhtml' in media_type:
                    file_types['HTML/XHTML'] += 1
                elif 'image' in media_type:
                    file_types['Images'] += 1
                elif 'css' in media_type:
                    file_types['CSS'] += 1
                else:
                    file_types['Other'] += 1
            
            print(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            for file_type, count in file_types.items():
                print(f"   ‚Ä¢ {file_type}: {count}")
            
        else:
            self.issues.append("–ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OPF —Ñ–∞–π–ª–µ")
    
    def _check_spine(self, opf_root):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ spine (–ø–æ—Ä—è–¥–æ–∫ —á—Ç–µ–Ω–∏—è)"""
        ns = {'opf': 'http://www.idpf.org/2007/opf'}
        
        spine = opf_root.find('.//opf:spine', ns)
        if spine is not None:
            itemrefs = spine.findall('.//opf:itemref', ns)
            
            self.info['spine_items'] = len(itemrefs)
            print(f"üìñ Spine: {len(itemrefs)} –≥–ª–∞–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ itemref —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            if hasattr(self, 'manifest_files'):
                for itemref in itemrefs:
                    idref = itemref.get('idref', '')
                    if idref not in self.manifest_files:
                        self.issues.append(f"Spine —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç: {idref}")
            
        else:
            self.issues.append("Spine –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OPF —Ñ–∞–π–ª–µ")
    
    def _check_content_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤"""
        if not hasattr(self, 'manifest_files'):
            return
        
        html_files = 0
        css_files = 0
        total_content_size = 0
        
        try:
            with zipfile.ZipFile(self.epub_path, 'r') as zip_file:
                for item_id, item_info in self.manifest_files.items():
                    href = item_info['href']
                    media_type = item_info['media_type']
                    
                    # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ OPF
                    opf_dir = str(Path(self.opf_path).parent)
                    if opf_dir == '.':
                        full_path = href
                    else:
                        full_path = f"{opf_dir}/{href}"
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if full_path in self.file_list:
                        file_info = zip_file.getinfo(full_path)
                        total_content_size += file_info.file_size
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å HTML/XHTML —Ñ–∞–π–ª—ã
                        if 'html' in media_type or 'xhtml' in media_type:
                            html_files += 1
                            self._check_html_file(zip_file, full_path)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å CSS —Ñ–∞–π–ª—ã  
                        elif 'css' in media_type:
                            css_files += 1
                    else:
                        self.issues.append(f"–§–∞–π–ª –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {full_path}")
            
            self.info['html_files'] = html_files
            self.info['css_files'] = css_files
            self.info['content_size'] = total_content_size
            
            print(f"üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç: {html_files} HTML, {css_files} CSS")
            print(f"üíæ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {total_content_size:,} –±–∞–π—Ç")
            
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    def _check_html_file(self, zip_file, file_path):
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–∞–π–ª–∞"""
        try:
            content = zip_file.read(file_path).decode('utf-8', errors='ignore')
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if len(content.strip()) == 0:
                self.warnings.append(f"–ü—É—Å—Ç–æ–π HTML —Ñ–∞–π–ª: {file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö HTML —Ç–µ–≥–æ–≤
            if '<html' not in content.lower() and '<body' not in content.lower():
                self.warnings.append(f"–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML: {file_path}")
                
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def _check_images(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not hasattr(self, 'manifest_files'):
            return
        
        image_count = 0
        image_size = 0
        image_types = defaultdict(int)
        
        try:
            with zipfile.ZipFile(self.epub_path, 'r') as zip_file:
                for item_id, item_info in self.manifest_files.items():
                    media_type = item_info['media_type']
                    
                    if 'image' in media_type:
                        href = item_info['href']
                        opf_dir = str(Path(self.opf_path).parent)
                        
                        if opf_dir == '.':
                            full_path = href
                        else:
                            full_path = f"{opf_dir}/{href}"
                        
                        if full_path in self.file_list:
                            file_info = zip_file.getinfo(full_path)
                            image_count += 1
                            image_size += file_info.file_size
                            
                            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            ext = Path(href).suffix.lower()
                            image_types[ext] += 1
                        else:
                            self.warnings.append(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {full_path}")
            
            self.info['image_count'] = image_count
            self.info['image_size'] = image_size
            
            if image_count > 0:
                print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_count} —Ñ–∞–π–ª–æ–≤ ({image_size:,} –±–∞–π—Ç)")
                for img_type, count in image_types.items():
                    print(f"   ‚Ä¢ {img_type}: {count}")
            else:
                print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            self.warnings.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def _analyze_size_and_stats(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        file_size = self.epub_path.stat().st_size
        self.info['file_size'] = file_size
        
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è
        if hasattr(self, 'info') and 'content_size' in self.info:
            compression_ratio = (1 - file_size / max(self.info['content_size'], 1)) * 100
            self.info['compression_ratio'] = compression_ratio
        
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size/1024/1024:.1f} MB)")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        self._assess_quality()
    
    def _assess_quality(self):
        """–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ EPUB"""
        score = 100
        quality_issues = []
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_issues = len(self.issues)
        score -= critical_issues * 20
        
        # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warning_count = len(self.warnings)
        score -= warning_count * 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if self.info.get('file_size', 0) < 1024:  # –ú–µ–Ω—å—à–µ 1KB
            score -= 30
            quality_issues.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
        
        if self.info.get('html_files', 0) == 0:
            score -= 25
            quality_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç HTML —Ñ–∞–π–ª—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        
        if not self.info.get('title') or self.info.get('title') == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            score -= 10
            quality_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        
        if not self.info.get('creator') or self.info.get('creator') == "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            score -= 10
            quality_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ—Ä")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É
        score = max(0, min(100, score))
        
        self.info['quality_score'] = score
        self.info['quality_issues'] = quality_issues
        
        print(f"üìà –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {score}/100")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*50)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("="*50)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.info:
            print("\nüìö –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
            for key, value in self.info.items():
                if key.startswith('quality_'):
                    continue
                print(f"   ‚Ä¢ {key}: {value}")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = self.info.get('quality_score', 0)
        if quality_score >= 80:
            quality_status = "üü¢ –û–¢–õ–ò–ß–ù–û–ï"
        elif quality_score >= 60:
            quality_status = "üü° –•–û–†–û–®–ï–ï"
        elif quality_score >= 40:
            quality_status = "üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–ï"
        else:
            quality_status = "üî¥ –ü–õ–û–•–û–ï"
        
        print(f"\nüéØ –ö–ê–ß–ï–°–¢–í–û EPUB: {quality_status} ({quality_score}/100)")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if self.issues:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({len(self.issues)}):")
            for issue in self.issues:
                print(f"   ‚Ä¢ {issue}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞
        quality_issues = self.info.get('quality_issues', [])
        if quality_issues:
            print(f"\nüìâ –ü–†–û–ë–õ–ï–ú–´ –ö–ê–ß–ï–°–¢–í–ê:")
            for issue in quality_issues:
                print(f"   ‚Ä¢ {issue}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if quality_score >= 80:
            print("   ‚úÖ EPUB —Ñ–∞–π–ª –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        elif self.issues:
            print("   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
            print("   üìñ –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∏—Ç–∞–ª–∫–∞—Ö")
        elif quality_score < 60:
            print("   ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("   üì± –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
        else:
            print("   üëç –§–∞–π–ª –ø—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–µ–¥–æ—á–µ—Ç–∞–º–∏")
        
        print("\n" + "="*50)
        
        return {
            'quality_score': quality_score,
            'status': quality_status,
            'issues_count': len(self.issues),
            'warnings_count': len(self.warnings),
            'info': self.info,
            'issues': self.issues,
            'warnings': self.warnings
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ EPUB"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python epub_diagnostics.py <–ø—É—Ç—å_–∫_epub_—Ñ–∞–π–ª—É>")
        return 1
    
    epub_path = sys.argv[1]
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
    diagnostics = EPUBDiagnostics(epub_path)
    result = diagnostics.analyze()
    
    # –í–µ—Ä–Ω—É—Ç—å –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_score = result['quality_score']
    if quality_score >= 80:
        return 0  # –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    elif quality_score >= 60:
        return 0  # –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ 
    elif result['issues_count'] > 0:
        return 2  # –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    else:
        return 1  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

if __name__ == "__main__":
    sys.exit(main())