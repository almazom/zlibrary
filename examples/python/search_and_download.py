#!/usr/bin/env python3
"""
üîç Z-Library Search and Download Example
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç JSON API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥
"""

import subprocess
import json
import sys
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PROJECT_ROOT = Path(__file__).parent.parent.parent  # examples/python -> project root
API_SCRIPT = PROJECT_ROOT / "scripts" / "zlib_book_search.sh"
DOWNLOAD_DIR = PROJECT_ROOT / "examples" / "downloads"

def run_api_command(cmd_args):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É API –∏ –≤–µ—Ä–Ω—É—Ç—å JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    cmd = [str(API_SCRIPT)] + cmd_args
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=PROJECT_ROOT)
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ stdout
        if result.stdout.strip():
            try:
                return json.loads(result.stdout)
            except json.JSONDecodeError:
                return {"status": "error", "message": f"Invalid JSON response: {result.stdout}"}
        
        # –ï—Å–ª–∏ stdout –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å stderr
        if result.stderr.strip():
            try:
                return json.loads(result.stderr)
            except json.JSONDecodeError:
                return {"status": "error", "message": f"Error: {result.stderr}"}
        
        return {"status": "error", "message": "No response from API"}
        
    except Exception as e:
        return {"status": "error", "message": f"Command failed: {e}"}

def search_books(query, format_type="epub", language="english", count=5):
    """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    print(f"üîç –ü–æ–∏—Å–∫: '{query}' (—Ñ–æ—Ä–º–∞—Ç: {format_type}, —è–∑—ã–∫: {language})")
    
    cmd_args = [
        "--json",
        "-f", format_type,
        "-l", language, 
        "-c", str(count),
        query
    ]
    
    result = run_api_command(cmd_args)
    
    if result["status"] == "success":
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {result['total_results']} –∫–Ω–∏–≥:")
        books = result["results"]
        
        for i, book in enumerate(books, 1):
            authors = ", ".join(book.get("authors", ["Unknown"]))
            size = book.get("size", "Unknown")
            year = book.get("year", "Unknown")
            rating = book.get("rating", "Unknown")
            
            print(f"  {i}. üìö {book['name']}")
            print(f"     üë• –ê–≤—Ç–æ—Ä—ã: {authors}")
            print(f"     üìÖ –ì–æ–¥: {year}")
            print(f"     üíæ –†–∞–∑–º–µ—Ä: {size}")
            print(f"     ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}")
            print()
        
        return books
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['message']}")
        return []

def download_book(query, format_type="epub", language="english", output_dir=None):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É"""
    if output_dir is None:
        output_dir = DOWNLOAD_DIR
    
    print(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: '{query}' –≤ {output_dir}")
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    cmd_args = [
        "--json",
        "--download",
        "-f", format_type,
        "-l", language,
        "-o", str(output_dir),
        query
    ]
    
    result = run_api_command(cmd_args)
    
    if result["status"] == "success":
        book_info = result["book"]
        file_info = result["file"]
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {book_info['name']}")
        print(f"üìÑ –§–∞–π–ª: {file_info['path']}")
        print(f"üíæ –†–∞–∑–º–µ—Ä: {file_info['size']:,} –±–∞–π—Ç")
        
        return file_info["path"]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['message']}")
        return None

def check_limits():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤...")
    
    result = run_api_command(["--json", "--limits"])
    
    if result["status"] == "success":
        limits = result["limits"]
        warnings = result.get("warnings", [])
        
        print(f"üìà –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {limits['daily_allowed']}")
        print(f"üîÑ –û—Å—Ç–∞–µ—Ç—Å—è: {limits['daily_remaining']}")
        print(f"üïê –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: {limits['daily_reset']} —á–∞—Å–æ–≤")
        
        if warnings:
            for warning in warnings:
                print(f"‚ö†Ô∏è {warning}")
        
        return limits["daily_remaining"] > 0
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {result['message']}")
        return False

def select_book_interactive(books):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏"""
    if not books:
        return None
    
    print("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
    for i, book in enumerate(books, 1):
        print(f"  {i}. {book['name']}")
    
    while True:
        try:
            choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(books)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
            
            if choice.lower() == 'q':
                return None
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(books):
                selected_book = books[choice_num - 1]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞: {selected_book['name']}")
                return selected_book
            else:
                print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(books)}")
        
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except KeyboardInterrupt:
            print("\nüëã –í—ã—Ö–æ–¥...")
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API"""
    print("üöÄ Z-Library API Example - –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not API_SCRIPT.exists():
        print(f"‚ùå API —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {API_SCRIPT}")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏:")
    has_quota = check_limits()
    
    if not has_quota:
        print("‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω!")
        return 1
    
    # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
    print("\n2Ô∏è‚É£ –ü–æ–∏—Å–∫ –∫–Ω–∏–≥:")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–æ–≤
    search_queries = [
        {"query": "python programming", "format": "epub", "language": "english"},
        {"query": "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "format": "epub", "language": "russian"},
        {"query": "data science", "format": "pdf", "language": "english"}
    ]
    
    all_books = []
    
    for search in search_queries:
        print(f"\nüîç –ü–æ–∏—Å–∫: {search['query']}")
        books = search_books(
            search["query"], 
            search["format"], 
            search["language"], 
            count=3
        )
        
        if books:
            # –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ –∫ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ
            for book in books:
                book["_search_query"] = search["query"]
                book["_search_format"] = search["format"]
                book["_search_language"] = search["language"]
            
            all_books.extend(books)
    
    if not all_books:
        print("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return 1
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
    print(f"\n3Ô∏è‚É£ –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ {len(all_books)} –∫–Ω–∏–≥")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –¥–µ–º–æ
    selected_book = all_books[0]
    print(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞: {selected_book['name']}")
    
    # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:
    # selected_book = select_book_interactive(all_books)
    
    if not selected_book:
        print("üëã –í—ã—Ö–æ–¥ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏")
        return 0
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
    print(f"\n4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏:")
    
    # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    book_dir = DOWNLOAD_DIR / "epub_books"
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–æ–∏—Å–∫–∞
    downloaded_file = download_book(
        selected_book["_search_query"],
        selected_book["_search_format"], 
        selected_book["_search_language"],
        book_dir
    )
    
    if downloaded_file:
        print(f"\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìÅ –§–∞–π–ª: {downloaded_file}")
        
        # –í–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        return downloaded_file
    else:
        print("\n‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return 1

if __name__ == "__main__":
    try:
        result = main()
        if isinstance(result, str):
            print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            sys.exit(0)
        else:
            sys.exit(result)
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)